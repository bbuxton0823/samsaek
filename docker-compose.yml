version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: samsaek-postgres
    environment:
      POSTGRES_DB: samsaek
      POSTGRES_USER: samsaek
      POSTGRES_PASSWORD: samsaek_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U samsaek -d samsaek"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - samsaek-network

  # TimescaleDB for time-series data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: samsaek-timescaledb
    environment:
      POSTGRES_DB: samsaek_metrics
      POSTGRES_USER: samsaek
      POSTGRES_PASSWORD: samsaek_password
    ports:
      - "5433:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U samsaek -d samsaek_metrics"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - samsaek-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: samsaek-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - samsaek-network

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: samsaek-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - samsaek-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: samsaek-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - samsaek-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: samsaek-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - samsaek-network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: samsaek-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - samsaek-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: samsaek-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/tmp
    networks:
      - samsaek-network

  # MinIO for object storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: samsaek-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: samsaek
      MINIO_ROOT_PASSWORD: samsaek_password
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - samsaek-network

  # Samsaek API Service
  samsaek-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: samsaek-api
    depends_on:
      - postgres
      - redis
      - kafka
      - timescaledb
    ports:
      - "8000:8000"
      - "8001:8001"  # Prometheus metrics
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://samsaek:samsaek_password@postgres:5432/samsaek
      - TIMESERIES_DB_URL=postgresql://samsaek:samsaek_password@timescaledb:5432/samsaek_metrics
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - EXA_API_KEY=${EXA_API_KEY}
      - WEAVE_API_KEY=${WEAVE_API_KEY}
      - A2A_AGENT_ID=samsaek-dev-001
      - SECRET_KEY=your-secret-key-here-change-in-production
    volumes:
      - ./src:/app/src
      - ./configs:/app/configs
    networks:
      - samsaek-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Celery Worker for background tasks
  samsaek-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: samsaek-worker
    depends_on:
      - postgres
      - redis
      - kafka
    command: celery -A samsaek.core.celery worker --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://samsaek:samsaek_password@postgres:5432/samsaek
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - EXA_API_KEY=${EXA_API_KEY}
      - WEAVE_API_KEY=${WEAVE_API_KEY}
      - A2A_AGENT_ID=samsaek-worker-001
      - SECRET_KEY=your-secret-key-here-change-in-production
    volumes:
      - ./src:/app/src
      - ./configs:/app/configs
    networks:
      - samsaek-network
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  samsaek-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: samsaek-beat
    depends_on:
      - postgres
      - redis
    command: celery -A samsaek.core.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://samsaek:samsaek_password@postgres:5432/samsaek
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-here-change-in-production
    volumes:
      - ./src:/app/src
      - ./configs:/app/configs
    networks:
      - samsaek-network
    restart: unless-stopped

volumes:
  postgres_data:
  timescale_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  prometheus_data:
  grafana_data:
  jaeger_data:
  minio_data:

networks:
  samsaek-network:
    driver: bridge